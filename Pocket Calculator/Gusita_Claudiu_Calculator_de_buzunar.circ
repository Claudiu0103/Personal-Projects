<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="BASYS3"/>
    <a name="downloadFrequency" val="5.0E7"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <boardmap boardname="BASYS3">
      <mc key="/Input_bus_1" pmap="341_323_0,305_323_0,268_323_0,228_323_0,192_323_0,154_323_0,117_323_0,78_323_0"/>
      <mc key="/Input_bus_2" pmap="647_323_0,609_323_0,571_323_0,535_323_0,497_323_0,456_323_0,417_323_0,382_323_0"/>
      <mc key="/Input_bus_3" pmap="582_238_0,536_272_0"/>
      <mc key="/Output_1" map="168,295"/>
      <mc key="/Output_2" map="131,295"/>
      <mc key="/Output_3" map="92,295"/>
      <mc key="/Output_bus_1" pmap="138_258_0,130_249_0,130_263_0,136_274_0,154_262_0,154_248_0,136_245_0"/>
      <mc key="/Output_bus_2" pmap="273_234_0,225_234_0,180_234_0,130_234_0"/>
    </boardmap>
    <comp lib="0" loc="(1000,470)" name="Clock"/>
    <comp lib="0" loc="(1290,210)" name="Splitter">
      <a name="bit1" val="0"/>
      <a name="bit10" val="2"/>
      <a name="bit11" val="2"/>
      <a name="bit12" val="3"/>
      <a name="bit13" val="3"/>
      <a name="bit14" val="3"/>
      <a name="bit15" val="3"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="1"/>
      <a name="bit5" val="1"/>
      <a name="bit6" val="1"/>
      <a name="bit7" val="1"/>
      <a name="bit8" val="2"/>
      <a name="bit9" val="2"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="16"/>
    </comp>
    <comp lib="0" loc="(1330,470)" name="Splitter"/>
    <comp lib="0" loc="(1770,540)" name="Splitter">
      <a name="facing" val="north"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(1810,460)" name="Ground"/>
    <comp lib="0" loc="(1830,530)" name="Splitter">
      <a name="facing" val="north"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(1870,500)" name="Splitter">
      <a name="facing" val="north"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(1910,400)" name="Constant"/>
    <comp lib="0" loc="(1920,480)" name="Splitter">
      <a name="facing" val="north"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(200,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_1"/>
      <a name="radix" val="10unsigned"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(200,340)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_2"/>
      <a name="radix" val="10unsigned"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(2180,480)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_2"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(2250,190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(690,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_2"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(740,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_3"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(800,150)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_1"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(850,520)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_3"/>
      <a name="width" val="2"/>
    </comp>
    <comp loc="(1090,210)" name="mux">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="mux_1"/>
    </comp>
    <comp loc="(1260,470)" name="counter">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="counter_1"/>
    </comp>
    <comp loc="(1830,190)" name="mux_SSD">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="mux_ssd_1"/>
    </comp>
    <comp loc="(2140,190)" name="BCD_7_segmente">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="bcd_7_segmente_1"/>
    </comp>
    <comp loc="(2160,480)" name="mux_SSD">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="mux_ssd_2"/>
    </comp>
    <comp loc="(680,230)" name="scazator_8_biti">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="scazator_8_biti_1"/>
    </comp>
    <comp loc="(690,130)" name="sumator">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="sumator_1"/>
    </comp>
    <comp loc="(690,330)" name="inmultitor">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="inmultitor_1"/>
    </comp>
    <comp loc="(700,410)" name="impartitor">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="impartitor_1"/>
    </comp>
    <wire from="(1000,470)" to="(1040,470)"/>
    <wire from="(1090,210)" to="(1290,210)"/>
    <wire from="(1260,470)" to="(1330,470)"/>
    <wire from="(1310,170)" to="(1350,170)"/>
    <wire from="(1310,180)" to="(1340,180)"/>
    <wire from="(1310,190)" to="(1330,190)"/>
    <wire from="(1310,200)" to="(1320,200)"/>
    <wire from="(1320,200)" to="(1320,220)"/>
    <wire from="(1320,220)" to="(1550,220)"/>
    <wire from="(1330,190)" to="(1330,210)"/>
    <wire from="(1330,210)" to="(1560,210)"/>
    <wire from="(1340,180)" to="(1340,200)"/>
    <wire from="(1340,200)" to="(1600,200)"/>
    <wire from="(1350,170)" to="(1350,190)"/>
    <wire from="(1350,190)" to="(1610,190)"/>
    <wire from="(1350,450)" to="(1370,450)"/>
    <wire from="(1350,460)" to="(1360,460)"/>
    <wire from="(1360,290)" to="(1360,460)"/>
    <wire from="(1360,290)" to="(1610,290)"/>
    <wire from="(1360,460)" to="(1360,590)"/>
    <wire from="(1360,590)" to="(1890,590)"/>
    <wire from="(1370,270)" to="(1370,450)"/>
    <wire from="(1370,270)" to="(1610,270)"/>
    <wire from="(1370,450)" to="(1370,580)"/>
    <wire from="(1370,580)" to="(1880,580)"/>
    <wire from="(1550,220)" to="(1550,250)"/>
    <wire from="(1550,250)" to="(1610,250)"/>
    <wire from="(1560,210)" to="(1560,230)"/>
    <wire from="(1560,230)" to="(1610,230)"/>
    <wire from="(1600,200)" to="(1600,210)"/>
    <wire from="(1600,210)" to="(1610,210)"/>
    <wire from="(1730,480)" to="(1730,520)"/>
    <wire from="(1730,480)" to="(1800,480)"/>
    <wire from="(1740,510)" to="(1740,520)"/>
    <wire from="(1740,510)" to="(1750,510)"/>
    <wire from="(1750,510)" to="(1750,520)"/>
    <wire from="(1750,510)" to="(1760,510)"/>
    <wire from="(1760,510)" to="(1760,520)"/>
    <wire from="(1760,510)" to="(1790,510)"/>
    <wire from="(1770,540)" to="(1940,540)"/>
    <wire from="(1790,490)" to="(1790,510)"/>
    <wire from="(1790,490)" to="(1810,490)"/>
    <wire from="(1800,470)" to="(1800,480)"/>
    <wire from="(1800,470)" to="(1850,470)"/>
    <wire from="(1800,480)" to="(1800,510)"/>
    <wire from="(1810,460)" to="(1820,460)"/>
    <wire from="(1810,490)" to="(1810,510)"/>
    <wire from="(1810,490)" to="(1820,490)"/>
    <wire from="(1820,460)" to="(1820,490)"/>
    <wire from="(1820,460)" to="(1830,460)"/>
    <wire from="(1820,490)" to="(1820,510)"/>
    <wire from="(1830,190)" to="(1920,190)"/>
    <wire from="(1830,460)" to="(1830,480)"/>
    <wire from="(1830,460)" to="(1840,460)"/>
    <wire from="(1830,530)" to="(1930,530)"/>
    <wire from="(1840,460)" to="(1840,480)"/>
    <wire from="(1840,460)" to="(1860,460)"/>
    <wire from="(1850,430)" to="(1850,470)"/>
    <wire from="(1850,430)" to="(1910,430)"/>
    <wire from="(1850,470)" to="(1850,480)"/>
    <wire from="(1860,460)" to="(1860,480)"/>
    <wire from="(1860,460)" to="(1880,460)"/>
    <wire from="(1870,500)" to="(1940,500)"/>
    <wire from="(1880,460)" to="(1890,460)"/>
    <wire from="(1880,560)" to="(1880,580)"/>
    <wire from="(1880,560)" to="(1940,560)"/>
    <wire from="(1890,460)" to="(1900,460)"/>
    <wire from="(1890,580)" to="(1890,590)"/>
    <wire from="(1890,580)" to="(1940,580)"/>
    <wire from="(1910,400)" to="(1910,430)"/>
    <wire from="(1910,430)" to="(1910,460)"/>
    <wire from="(1920,480)" to="(1940,480)"/>
    <wire from="(1930,520)" to="(1930,530)"/>
    <wire from="(1930,520)" to="(1940,520)"/>
    <wire from="(200,230)" to="(240,230)"/>
    <wire from="(200,340)" to="(240,340)"/>
    <wire from="(2140,190)" to="(2250,190)"/>
    <wire from="(2160,480)" to="(2180,480)"/>
    <wire from="(240,130)" to="(240,230)"/>
    <wire from="(240,130)" to="(470,130)"/>
    <wire from="(240,230)" to="(240,320)"/>
    <wire from="(240,230)" to="(460,230)"/>
    <wire from="(240,320)" to="(460,320)"/>
    <wire from="(240,340)" to="(240,430)"/>
    <wire from="(240,340)" to="(260,340)"/>
    <wire from="(240,430)" to="(480,430)"/>
    <wire from="(260,150)" to="(260,250)"/>
    <wire from="(260,150)" to="(470,150)"/>
    <wire from="(260,250)" to="(260,340)"/>
    <wire from="(260,250)" to="(460,250)"/>
    <wire from="(260,340)" to="(260,350)"/>
    <wire from="(260,350)" to="(470,350)"/>
    <wire from="(460,320)" to="(460,330)"/>
    <wire from="(460,330)" to="(460,410)"/>
    <wire from="(460,330)" to="(470,330)"/>
    <wire from="(460,410)" to="(480,410)"/>
    <wire from="(680,230)" to="(870,230)"/>
    <wire from="(680,250)" to="(690,250)"/>
    <wire from="(680,330)" to="(690,330)"/>
    <wire from="(690,130)" to="(860,130)"/>
    <wire from="(690,150)" to="(800,150)"/>
    <wire from="(690,330)" to="(840,330)"/>
    <wire from="(690,410)" to="(700,410)"/>
    <wire from="(700,410)" to="(850,410)"/>
    <wire from="(700,430)" to="(740,430)"/>
    <wire from="(840,250)" to="(840,330)"/>
    <wire from="(840,250)" to="(870,250)"/>
    <wire from="(850,270)" to="(850,410)"/>
    <wire from="(850,270)" to="(870,270)"/>
    <wire from="(850,520)" to="(860,520)"/>
    <wire from="(860,130)" to="(860,210)"/>
    <wire from="(860,210)" to="(870,210)"/>
    <wire from="(860,290)" to="(860,520)"/>
    <wire from="(860,290)" to="(870,290)"/>
  </circuit>
  <vhdl name="CALCULATOR_DE_BUZUNAR">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY CALCULATOR_DE_BUZUNAR IS&#13;
  PORT (&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
    clock      : IN  std_logic;                    -- input bit example&#13;
    val        : IN  std_logic_vector(3 DOWNTO 0); -- input vector example&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert output ports below&#13;
    max        : OUT std_logic;                    -- output bit example&#13;
    cpt        : OUT std_logic_vector(3 DOWNTO 0)  -- output vector example&#13;
    );&#13;
END CALCULATOR_DE_BUZUNAR;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF CALCULATOR_DE_BUZUNAR IS&#13;
&#13;
BEGIN&#13;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="sumator">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY sumator IS
  PORT(
		a: in std_logic_vector(7 downto 0);
		b: in std_logic_vector(7 downto 0);
  		s:out std_logic_vector(15 downto 0);
  		cout:out std_logic);
END sumator;
--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE structural OF sumator IS

component sumator1 is
port( a,b,cin:in std_logic;
	 s:out std_logic;
	 cout: out std_logic);
end component;

signal c2, c3, c4, c5, c6, c7, c8 : std_logic;
BEGIN
s(15 downto 8)&lt;="00000000";
suma1: sumator1 port map(a(0), b(0), '0', s(0), c2);
suma2: sumator1 port map(a(1), b(1), c2, s(1), c3);
suma3: sumator1 port map(a(2), b(2), c3, s(2), c4);
suma4: sumator1 port map(a(3), b(3), c4, s(3), c5);
suma5: sumator1 port map(a(4), b(4), c5, s(4), c6);
suma6: sumator1 port map(a(5), b(5), c6, s(5), c7);
suma7: sumator1 port map(a(6), b(6), c7, s(6), c8);
suma8: sumator1 port map(a(7), b(7), c8, s(7), cout);
end structural;

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity sumator1 is
port( a,b,cin: in std_logic;
		s:out std_logic;
		cout: out std_logic);
end sumator1;
architecture flux_de_date of sumator1 is

signal inter:std_logic;
BEGIN
inter&lt;=a xor b after 1 ns;
s &lt;= inter xor cin after 1 ns;
cout&lt;= (a and b) or (inter and cin) after 2 ns;
end flux_de_date;
	 

</vhdl>
  <vhdl name="scazator_8_biti">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY scazator_8_biti IS
  PORT (
 		 a : in std_logic_vector(7 downto 0);
  		 b : in std_logic_vector(7 downto 0);
  		 d : out std_logic_vector(15 downto 0);
  		 bout : out std_logic);
END scazator_8_biti;

&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE strucutural OF scazator_8_biti IS&#13;
component scazator_1_bit is
  PORT (
  		a:in std_logic;
  		b:in std_logic;
  		bin:in std_logic;
  		d:out std_logic;
  		bout:out std_logic
    );
end component;
&#13;signal c2,c3,c4,c5,c6,c7,c8:std_logic;
BEGIN&#13;
d(15 downto 8)&lt;="00000000";
&#13;dif1:scazator_1_bit port map(a(0),b(0),'0',d(0),c2);

dif2:scazator_1_bit port map(a(1),b(1),c2,d(1),c3);

dif3:scazator_1_bit port map(a(2),b(2),c3,d(2),c4);

dif4:scazator_1_bit port map(a(3),b(3),c4,d(3),c5);

dif5:scazator_1_bit port map(a(4),b(4),c5,d(4),c6);

dif6:scazator_1_bit port map(a(5),b(5),c6,d(5),c7);

dif7:scazator_1_bit port map(a(6),b(6),c7,d(6),c8);

dif8:scazator_1_bit port map(a(7),b(7),c8,d(7),bout);

END strucutural;&#13;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
ENTITY scazator_1_bit IS
  PORT (
  		a:in std_logic;
  		b:in std_logic;
  		bin:in std_logic;
  		d:out std_logic;
  		bout:out std_logic
    );
END scazator_1_bit;

ARCHITECTURE flux_de_date OF scazator_1_bit IS
BEGIN
d&lt;=(a xor b)xor bin;
bout&lt;=(((not a) and b)or((not a)and bin))or(b and bin);
END flux_de_date;
</vhdl>
  <vhdl name="inmultitor">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
ENTITY inmultitor IS&#13;
  PORT (&#13;
  		a:in std_logic_vector(7 downto 0);
  		b:in std_logic_vector(7 downto 0);
  		prod:out std_logic_vector(15 downto 0)
  );
END inmultitor;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE comportamentala OF inmultitor IS&#13;
signal n: integer;
begin
n&lt;=conv_integer(b);
process(a,n)
variable aux:std_logic_vector(15 downto 0);
variable aux_b:integer;
begin
aux:="0000000000000000";
aux_b:=1;
eticheta:for k in 256 downto 1 loop
if aux_b&lt;=n then
aux:=aux+a;
end if;
aux_b:=aux_b+1;
end loop;
if n=0 then aux:="0000000000000000";
end if;
prod&lt;=aux;
end process;
END comportamentala;&#13;
</vhdl>
  <vhdl name="impartitor">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
ENTITY impartitor IS&#13;
  PORT (&#13;
		a:in std_logic_vector(7 downto 0);
		b:in std_logic_vector(7 downto 0);
		rez:out std_logic_vector(15 downto 0);
		eroare:out std_logic
    );&#13;
END impartitor;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE comportamental OF impartitor IS&#13;
signal aux_eroare:std_logic;
signal n:integer;
BEGIN&#13;
n&lt;=conv_integer(b);
process(a,b,aux_eroare)
variable aux_rest:std_logic_vector(7 downto 0);
variable aux_cat:std_logic_vector(7 downto 0);
variable aux_a:std_logic_vector(7 downto 0);
variable ok:std_logic;
begin
aux_cat:="00000000";
aux_a:=a;
aux_eroare&lt;='0';

if a&lt;b then aux_rest:=a;
aux_cat:="00000000";

else
eticheta: for k in 255 downto 0 loop
if aux_a&gt;=b then aux_a:=aux_a-b;
aux_cat:=aux_cat+1;
end if;
end loop;
aux_rest:=aux_a;
end if;
if b="00000000"then aux_eroare&lt;='1';

aux_rest:="00000000";
aux_cat:="00000000";

end if;

rez&lt;=aux_cat&amp;aux_rest;
eroare&lt;=aux_eroare;

&#13;end process;
END comportamental;&#13;
</vhdl>
  <vhdl name="mux">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY mux IS&#13;
  PORT (&#13;
		suma:in std_logic_vector(15 downto 0);
		diferenta:in std_logic_vector(15 downto 0);
		inmultire: in std_logic_vector(15 downto 0);
		impartire:in std_logic_vector(15 downto 0);
		semn:in std_logic_vector(1 downto 0);
		rezultat:out std_logic_vector(15 downto 0)
    );&#13;
END mux;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF mux IS&#13;
&#13;signal aux:std_logic_vector(15 downto 0);
BEGIN&#13;
&#13;process(semn,suma,diferenta,inmultire,impartire)
begin
case(semn) is 
when "00"=&gt;aux&lt;=suma;
when "01"=&gt;aux&lt;=diferenta;
when "10"=&gt;aux&lt;=inmultire;
when others=&gt;aux&lt;=impartire;
&#13;end case;
end process;
rezultat&lt;=aux;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="divizor_de_frecventa">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;use ieee.std_logic_unsigned.all;
ENTITY divizor_de_frecventa IS&#13;
  PORT (&#13;
  		clock:in std_logic;
  		div_clk: out std_logic
    );&#13;
END divizor_de_frecventa;&#13;
&#13;
ARCHITECTURE TypeArchitecture OF divizor_de_frecventa IS&#13;
&#13;signal tmp: std_logic_vector(6 downto 0):=(others =&gt;'0');
BEGIN&#13;
&#13;process(clock)
begin
	if(rising_edge(clock))then 
		if tmp=("1100011")then tmp&lt;="0000000";
			elsif(tmp&lt;="0110001")then 
							tmp&lt;=tmp+1;
							div_clk&lt;='0';
			else div_clk&lt;='1';
			tmp&lt;=tmp+1;
	end if;
	end if;
end process;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="counter">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;
ENTITY counter IS
  PORT (
  		clock:in std_logic;
  		output:out std_logic_vector(1 downto 0)
    );
END counter;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF counter IS

BEGIN
process(clock)
variable aux:std_logic_vector(16 downto 0):="00000000000000000";

begin
if(clock'event and clock='1')then
aux:=aux+1;
end if;
output(1)&lt;=aux(16);
output(0)&lt;=aux(15);
end process;
END TypeArchitecture;

</vhdl>
  <vhdl name="mux_SSD">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY mux_SSD IS&#13;
  PORT (&#13;
		digit1: in std_logic_vector(3 downto 0);
		digit2: in std_logic_vector(3 downto 0);
		digit3: in std_logic_vector(3 downto 0);
		digit4: in std_logic_vector(3 downto 0);
		sel1: in std_logic;
		sel2: in std_logic;
		rez: out std_logic_vector(3 downto 0)
    );&#13;
END mux_SSD;&#13;
&#13;
ARCHITECTURE TypeArchitecture OF mux_SSD IS&#13;
&#13;signal aux:std_logic_vector(3 downto 0);
BEGIN&#13;
&#13;process(digit1,digit2,digit3,digit4,sel1,sel2)
&#13;begin
if sel1='0' and sel2='0'then aux&lt;=digit1;
elsif sel1='1' and sel2='0' then aux&lt;=digit2;
elsif sel1='0' and sel2='1' then aux&lt;=digit3;
else aux&lt;=digit4;
end if;
end process;
rez&lt;=aux;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="BCD_7_segmente">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY BCD_7_segmente IS
  PORT (
	i:in std_logic_vector(3 downto 0);
  		o:out std_logic_vector(6 downto 0)
    );
END BCD_7_segmente;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF BCD_7_segmente IS

BEGIN
process(i)
begin
o&lt;="0001110";
	if i=x"0" then o&lt;="1111110";
	elsif i=x"1" then o&lt;="0110000";
	elsif i=x"2" then o&lt;="1101101";
	elsif i=x"3" then o&lt;="1111001";
	elsif i=x"4" then o&lt;="0110011";
	elsif i=x"5" then o&lt;="1011011";
	elsif i=x"6" then o&lt;="1011111";
	elsif i=x"7" then o&lt;="1110000";
	elsif i=x"8" then o&lt;="1111111";
	elsif i=x"9" then o&lt;="1111011";
	elsif i=x"a" then o&lt;="1110111";
	elsif i=x"b" then o&lt;="0011111";
	elsif i=x"c" then o&lt;="0001101";
	elsif i=x"d" then o&lt;="0111101";
	elsif i=x"e" then o&lt;="1101111";
	else o&lt;="1000111";
end if;
end process;
END TypeArchitecture;</vhdl>
</project>
